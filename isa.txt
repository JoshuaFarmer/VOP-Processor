REGISTERS:
	A	16 bit accumulator
	P	16 bit program counter
	Rn	16 bit register bank (of 16 registers)
	Sn	16 bit stack pointer bank (of 16 registers)
	P0	8 bit code page
	P1	8 bit data page
	BS	1 bit busy flag, unused
	ZE	1 bit zero flag
	CY	1 bit carry flag
	PA	1 bit parity flag
	IM	1 bit interrupt mask flag
	DF	1 bit data format flag	(changes wheather pop/push/etc
										|using 16 (when false) bits or 8
										(when high))

instructions:
// 0x00-0x0F STACK OPERATIONS
PUSH_A_Sn = 0x00,
POP_A_Sn = 0x01,
POKE_A_Sn = 0x02,
PEEK_A_Sn = 0x03,

PUSH_Rn_Sn = 0x04,
POP_Rn_Sn = 0x05,
POKE_Rn = 0x06,
PEEK_Rn = 0x07,

PUSH_i8 = 0x08,
PUSH_i16 = 0x09,

PUSH_P0 = 0x0A,
PUSH_P1 = 0x0B,
POP_P1 = 0x0C,

PUSH_F = 0x0D,
POP_F = 0x0E,

// 0x10-0x15 EXCHANGE OPERATIONS
XC_A_A = 0x10,
XC_Rn0_Rn1 = 0x11,
XC_Rn_Sn = 0x12,
XC_Sn1_Sn2 = 0x13,
XC_A_Sn = 0x14,
XC_A_Rn = 0x15,

// 0x16-0x2A BASIC DATA MANIPULATION
STORE_A_a16 = 0x16,
STORE_Rn_a16 = 0x17,
LOAD_A_a16 = 0x18,
LOAD_Rn_a16 = 0x19,

FAR_STORE_A_a24 = 0x1A,
FAR_STORE_Rn_a24 = 0x1B,
FAR_LOAD_A_a24 = 0x1C,
FAR_LOAD_Rn_a24 = 0x1D,

SET_a16 = 0x1E,
GET_a16 = 0x1F,

BLCKGET_a16 = 0x20,
BLCKSET_a16 = 0x21,

LD_A_Rn = 0x22,
LD_A_Sn = 0x23,
LD_Rn_A = 0x24,
LD_Sn_A = 0x25,
LD_Rn_Sn = 0x26,
LD_Sn_Rn = 0x27,

LD_Rn_i16 = 0x28,
LD_Sn_i16 = 0x29,
LD_A_i16 = 0x2A,

// 0x2B-0x38 ARITHMETIC OPERATIONS
ADD_i16 = 0x2B,
ADD_Sn = 0x2E,
ADD_Rn = 0x2F,
ADD_i16_imm = 0x30,
ADD_Sn_A = 0x31,
ADD_Rn_A = 0x32,

SUB_i16 = 0x33,
SUB_Sn = 0x34,
SUB_Rn = 0x35,
SUB_i16_imm = 0x36,
SUB_Sn_A = 0x37,
SUB_Rn_A = 0x38,

CMP_i16 = 0x73,
CMP_Sn = 0x74,
CMP_Rn = 0x75,
CMP_i16_imm = 0x76,
CMP_Sn_A = 0x77,
CMP_Rn_A = 0x78,

// 0x39-0x53 LOGICAL OPERATIONS
NOT_A = 0x39,
NEG_A,

NOT_Rn,
NEG_Rn,

NOT_Rn_mem,
NEG_Rn_mem,

NOT_Sn,
NEG_Sn,

AND_i16,
AND_Rn,
AND_Sn,
AND_i16_imm,
AND_Rn_reg,

OR_i16,
OR_Rn,
OR_Sn,
OR_i16_imm,
OR_Rn_reg,

XOR_i16,
XOR_Rn,
XOR_Sn,
XOR_i16_imm,
XOR_Rn_reg,

// 0x54-0x69 JUMP AND CALLING/RET
JUMP_a16 = 0x54,
JUMP_Rn = 0x55,
FAR_JUMP_a24 = 0x56,
REL_JUMP_i8 = 0x57,
REL_JMZ_i8 = 0x58,
REL_JMC_i8 = 0x59,
JMZ_a16 = 0x5A,
JMC_a16 = 0x5B,
JP_a16 = 0x5C,
JNZ_a16 = 0x5D,
JNC_a16 = 0x5E,
JNP_a16 = 0x5F,

CALL_a16 = 0x60,
FAR_CALL_a24 = 0x61,
CALZ_a16 = 0x62,
CALC_a16 = 0x63,
CALL_Rn = 0x64,

RET = 0x66,
FAR_RET = 0x67,
RETZ = 0x68,
RETC = 0x69,

// 0x6A-0xF0 OTHER INSTRUCTIONS
SETFORMAT_i8 = 0x6A,
OUT = 0x6B,
IN = 0x6C,
INT_i8 = 0x6D,
INT_Rn = 0x6E,
CLI = 0x6F,
STI = 0x70,

LDR_Rn0_Rn1 = 0x71,
STR_Rn0_Rn1 = 0x72,

INC_Rn = 0x80,
DEC_Rn = 0x81,
INC_Sn = 0x82,
DEC_Sn = 0x83,
INC_Rn_AT = 0x84,
DEC_Rn_AT = 0x85,
INC_Sn_AT = 0x86,
DEC_Sn_AT = 0x87,

INC_A = 0x88,
DEC_A = 0x89,

BLCKGET_Sn = 0x90,
BLCKSET_Sn = 0x91,
NEAR_POKE_Rn,
NEAR_PEEK_Rn,

SHL_R,
SHR_R,

ADD_Rn_i16,
SUB_Rn_i16,
CMP_Rn_i16,
ADD_Rn1_Rn2,
SUB_Rn1_Rn2,
CMP_Rn1_Rn2,
AND_Rn1_Rn2,
OR_Rn1_Rn2,
NAND_Rn1_Rn2,
XOR_Rn1_Rn2,
LD_Rn_Rn,
